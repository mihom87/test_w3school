{"name": "test_contact_name[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: Unable to find a matching set of capabilities", "trace": "request = <SubRequest 'browser' for <Function test_contact_name[chrome]>>\n\n    @pytest.fixture(params=['chrome',\n                            # 'firefox',\n                            ]\n                    )\n    def browser(request):\n        service_class = getattr(importlib.import_module(f'selenium.webdriver.{request.param}.service'),\n                                CLASS_NAME)\n        if request.param == 'chrome':\n            driver_manager = getattr(importlib.import_module('webdriver_manager.firefox'), 'GeckoDriverManager')\n>           driver = webdriver.Chrome(service=service_class(driver_manager().install()))\n\ntests/conftest.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../Library/Caches/pypoetry/virtualenvs/test-w3school-cEWY_VD--py3.10/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../../Library/Caches/pypoetry/virtualenvs/test-w3school-cEWY_VD--py3.10/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:56: in __init__\n    super().__init__(\n../../Library/Caches/pypoetry/virtualenvs/test-w3school-cEWY_VD--py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:205: in __init__\n    self.start_session(capabilities)\n../../Library/Caches/pypoetry/virtualenvs/test-w3school-cEWY_VD--py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../../Library/Caches/pypoetry/virtualenvs/test-w3school-cEWY_VD--py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107393d00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"Unable to find a matching set of capabilities\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: Unable to find a matching set of capabilities\n\n../../Library/Caches/pypoetry/virtualenvs/test-w3school-cEWY_VD--py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "description": "Вывести все строки таблицы Customers и убедиться,\n       что запись с ContactName равной 'Giovanni Rovelli' имеет Address = 'Via Ludovico il Moro 22'.", "parameters": [{"name": "browser", "value": "'chrome'"}], "start": 1694379564571, "stop": 1694379564571, "uuid": "aec25214-5f88-4ec4-9e7e-f959ceead7bc", "historyId": "3c02b7cd54783e7d6dc2152e55d7357c", "testCaseId": "3e98398c4f4521beb021167951305110", "fullName": "tests.test_1_contact_name#test_contact_name", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_1_contact_name"}, {"name": "host", "value": "MBA-C02H714UQ6LW.exness.local"}, {"name": "thread", "value": "14313-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_1_contact_name"}]}